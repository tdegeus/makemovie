#!/usr/bin/env python3
"""makemovie
  Convert a batch of images to a movie. The program automatically recognizes the storage-format and
  renumbers it such that "ffmpeg" can deal with it. There are a bunch of (automatic) conversion
  possibilities. It is also possible to apply (some of) these conversions without generating a
  movie.

  Note that this function does not apply any compression. It should be applied externally, e.g.:
  Handbrake (mac).

Usage:
  makemovie [options] <image>...

Arguments:
  image                     The images which form the frames of the movie.

Options:
  -o, --output=<str>        Filename of the output movie.
  -t, --time=<float>        Fix total time of the movie [default: 20].
  -r, --frame-rate=<float>  Fix the frame rate (see "ffmpeg"), ignores "--time" option.
      --background=<str>    Apply a background color (e.g. "none" or "white").
      --trim                Trim the images to the smallest size that fits all images.
      --flatten             Flatten input images: required for transparent PNG-files.
      --temp-dir=<str>      Output directory for temporary images (deleted if not specified).
  -v, --verbose             Print all executed commands.
  -h, --help                Show help.
      --version             Show version.

(c-MIT) T.W.J. de Geus | tom@geus.me | www.geus.me | github.com/tdegeus
"""

# ==================================================================================================

from subprocess import check_output, STDOUT
from docopt     import docopt

import os,sys,re
import shutil
import tempfile

# ==================================================================================================
# support functions
# ==================================================================================================

def exec_cmd(cmd,verbose=False):

  if verbose: print(cmd)

  output = check_output(cmd,shell=True,stderr=STDOUT).decode("utf-8")

  if verbose and len(output)>0: print(output)

  return output

# ==================================================================================================
# main program
# ==================================================================================================

# parse command line options / set defaults
# -----------------------------------------

# parse command-line options/arguments
args = docopt(__doc__,version='0.0.1')

# rename/set options (some names filled below, included here only to give an overview)
files          = [os.path.abspath(f) for f in args['<image>']]
verbose        = args['--verbose']
time           = float(args['--time'])
frame_rate     = args['--frame-rate'] if args['--frame-rate'] is not None else float(len(files))/time
flatten        = args['--flatten']
trim           = args['--trim']
set_background = True                 if args['--background'] is not None else False
background     = args['--background'] if args['--background'] is not None else 'white'
platform       = None
clean          = False
temp_dir       = os.path.abspath(args['--temp-dir']) if args['--temp-dir'] is not None else None
output         = os.path.abspath(args['--output'  ]) if args['--output'  ] is not None else None
fmt            = None

# check if all the input-files exist
for name in files:
  if not os.path.isfile(name):
    raise IOError('"%s" does not exist'%name); sys.exit(1)

# set temporary directory
if temp_dir is None              : temp_dir = tempfile.mkdtemp(); clean = True
elif not os.path.isdir(temp_dir) : exec_cmd('mkdir '+temp_dir,verbose=verbose)

# platform
if   sys.platform.startswith('linux' ) : platform = 'linux'
elif sys.platform.startswith('darwin') : platform = 'mac'

# set default extension for the output
if output:
  if len(os.path.splitext(output)[1]) == 0:
    output += '.mp4'

# interpret input
# ---------------

# return the common prefix of two strings
def commonprefix(s1,s2):
  for i, c in enumerate(s1):
    if c != s2[i]:
      return s1[:i]
  return s1

# return the common suffix of two strings
def commonsuffix(s1,s2):
  for i, c in enumerate(s1[::-1]):
    if c != s2[len(s2)-i-1]:
      return s1[len(s1)-i:]
  return s1

# get common prefix and suffix from all stings
# - initialize
pre = files[0]
suf = files[0]
# - loop over all files
for fname in files[1:]:
  pre = commonprefix(pre,fname)
  suf = commonsuffix(suf,fname)
# - remove zero-padding
try:
  while pre[-1]=='0':
    pre = pre[:-1]
except:
  raise IOError('ambiguous input, cannot proceed')

# check if zero-padding was used
# - initialize
pad  = False
n    = 0
imax = 0
# - loop over all files
for fname in files:
  try:
    i    = fname.split(pre)[1].split(suf)[0]
    pad  = max(pad ,len(i)!=len('{0:d}'.format(int(i))))
    n    = max(n   ,len(i))
    imax = max(imax,int(i))
  except:
    raise IOError('ambiguous input, cannot proceed')
# - check consistency: if padding is applied, it must be applied to all
if pad:
  pad = 0
  for fname in files:
    pad = max(pad,len(fname.split(pre)[1].split(suf)[0]))
    if not len(fname.split(pre)[1].split(suf)[0])==n:
      raise IOError('ambiguous input, cannot proceed')


# set FMT based on information extracted above
if pad: fmt = pre + '%0'+str(pad)+'d' + suf
else  : fmt = pre + '%d'              + suf

# copy/rename input files to temp_dir
# -----------------------------------

old = []
i   = 0

while len(old) != len(files):
  if os.path.exists(fmt%i): old += [fmt%i]
  i += 1

new = [(temp_dir+'/image%0d'+suf)%j for j in range(len(old))]

for i,j in zip(old,new):
  exec_cmd('cp %s %s'%(i,j),verbose=verbose)

files = new
fmt   = temp_dir+'/image%0d'+suf

# convert SVG -> PNG, if needed
# -----------------------------

if os.path.splitext(files[0])[1].lower() == '.svg':

  if not shutil.which('rsvg-convert'):
    raise IOError('"rsvg-convert" not found, please convert SVG files to PNG files manually')

  for file in files:

    exec_cmd('rsvg-convert -b {background:s} "{old:s}" -o "{new:s}"'.format(
      background = background,
      old        = file,
      new        = os.path.splitext(file)[0] + '.png'
    ),verbose=verbose)

  files          = [os.path.splitext(file)[0] + '.png' for file in files]
  fmt            =  os.path.splitext(fmt )[0] + '.png'
  flatten        = False
  set_background = False

# trim, if needed
# ---------------

if trim:

  if not shutil.which('convert'):
    raise IOError('"convert" not found, please install ImageMagick')

  out = []

  for file in files:

    out += [exec_cmd('convert -trim -verbose  "{old:s}" "{new:s}"'.format(
      old = file,
      new = temp_dir + '/tmp.png'
    ),verbose=verbose)]

  # read dimensions from convert output
  split = lambda txt: re.split('([0-9]*)(x)([0-9]*)(\ )([0-9]*)(x)([0-9]*)([\+][0-9]*)([\+][0-9]*)(.*)',txt)
  out   = [o.split('\n')[1] for o in out]
  w     = [int(split(o)[1]) for o in out] # width  of the original image
  h     = [int(split(o)[3]) for o in out] # height of the original image
  w0    = [int(split(o)[5]) for o in out] # width  of the trimmed image
  h0    = [int(split(o)[7]) for o in out] # height of the trimmed image
  x     = [int(split(o)[8]) for o in out] # horizontal position at which the trimmed image starts
  y     = [int(split(o)[9]) for o in out] # vertical   position at which the trimmed image starts

  if min(w0)!=max(w0) or min(h0)!=max(h0):
    raise IOError('Image size not consistent')

  # select crop dimensions
  dim      = {}
  dim['w'] = max(w)+(max(x)-min(x))
  dim['h'] = max(h)+(max(y)-min(y))
  dim['x'] = min(x)
  dim['y'] = min(y)

  opt  = ['-crop {w:d}x{h:d}{x:+d}{y:+d}'.format(**dim)]
  opt += ['-background %s'%background]
  if background != 'none': opt += ['-alpha remove']
  if flatten             : opt += ['-flatten']

  for file in files:

    exec_cmd('convert {options:s} "{old:s}" "{new:s}"'.format(
      options = ' '.join(opt),
      old     = file,
      new     = temp_dir + '/tmp.png'
    ),verbose=verbose)

    exec_cmd('mv "%s" "%s"'%(temp_dir + '/tmp.png',file),verbose=verbose)

  set_background = False
  flatten        = False

# flatten file, if needed
# -----------------------

if flatten or set_background:

  if not shutil.which('convert'):
    raise IOError('"convert" not found, please install ImageMagick')

  opt = []

  if flatten                                : opt += ['-flatten']
  if set_background                         : opt += ['-background %s'%background]
  if set_background and background != 'none': opt += ['-alpha remove']

  for file in files:

    exec_cmd('convert {options:s} "{old:s}" "{new:s}"'.format(
      options = ' '.join(opt),
      old     = file,
      new     = temp_dir + '/tmp.png'
    ),verbose=verbose)

    exec_cmd('mv "%s" "%s"'%(temp_dir + '/tmp.png',file),verbose=verbose)

# make movie, if needed
# ---------------------

if output:

  if not shutil.which('ffmpeg'):
    raise IOError('"ffmpeg" not found, please install ImageMagick')

  if   platform == 'linux' :
    exec_cmd('cd {temp_dir:s}; ffmpeg -r {frame_rate:f} -i "{fmt:s}" "{output:s}"'.format(
      temp_dir   = temp_dir,
      frame_rate = frame_rate,
      fmt        = fmt,
      output     = 'tmp.mp4',
    ),verbose=verbose)
    exec_cmd('mv "%s" "%s"'%(temp_dir+'/tmp.mp4',output))
  elif platform == 'mac':
    exec_cmd('cd {temp_dir:s}; ffmpeg -r {frame_rate:f} -vsync 1 -f image2 -i "{fmt:s}" -vcodec copy "{output:s}"'.format(
      temp_dir   = temp_dir,
      frame_rate = frame_rate,
      fmt        = fmt,
      output     = 'tmp.mp4',
    ),verbose=verbose)
    exec_cmd('mv "%s" "%s"'%(temp_dir+'/tmp.mp4',output))

  # remove the temporary directory if needed
  # ----------------------------------------

  if clean:
    exec_cmd('rm -r "%s"'%(temp_dir),verbose=verbose)
